// Generated by LiveScript 1.2.0
var Path, Url, ref$, Fsm, Fabuloso, ToolShed, _, Debug, PublicDB, LocalDB, Blueprint, Library, StoryBook, _universe, url, cur_proto, cur_host, cur_watcher, cur_file, UniVerse;
Path = require('path');
Url = require('url');
ref$ = require('MachineShop'), Fsm = ref$.Fsm, Fabuloso = ref$.Fabuloso, ToolShed = ref$.ToolShed, _ = ref$._;
Debug = ToolShed.Debug;
ref$ = require('./PublicDB'), PublicDB = ref$.PublicDB, LocalDB = ref$.LocalDB, Blueprint = ref$.Blueprint;
Library = require('./Library').Library;
StoryBook = require('./StoryBook').StoryBook;
url = Url.parse(window.location.href);
console.log("Url.parse", url);
cur_proto = url.protocol;
cur_host = url.host;
UniVerse = (function(superclass){
  var prototype = extend$((import$(UniVerse, superclass).displayName = 'UniVerse', UniVerse), superclass).prototype, constructor = UniVerse;
  function UniVerse(){
    var refs;
    refs = {
      UniVerse: this
    };
    _universe = this;
    this.persona = false;
    refs.archive = this.archive = new PublicDB({
      name: 'UniVerse'
    });
    refs.library = this.library = new Library(refs, {
      name: 'sencillo'
    });
    ToolShed.extend(this, Fabuloso);
    UniVerse.superclass.call(this, "UniVerse");
  }
  prototype.eventListeners = {
    '*': function(evt, opts){
      var ref$, dep, name, version, ready, reEmit;
      if (evt.indexOf('dep:') === 0) {
        ref$ = evt.split(':'), dep = ref$[0], name = ref$[1], version = ref$[2], ready = ref$[3];
        return console.log("we got a dep request!!", evt, opts, name, ready);
      } else {
        switch (evt) {
        case 'auth':
          // fallthrough
        case 'noauth':
        case 'disconnected':
        case 'connected':
          console.error("event.*", evt, arguments);
          return reEmit = true;
        }
      }
    },
    auth: function(persona){
      this.debug("WE HAVE AUTH");
      return this.persona = persona;
    },
    noauth: function(){
      return this.persona = false;
    },
    transition: function(e){
      var execs, this$ = this;
      console.log(this.namespace + " transition (%s -> %s)", e.priorState, e.toState);
      execs = Object.keys(this.states[e.toState]);
      _.each(this._derivitaves, function(v, derivitave){
        var d_name, i$, ref$, len$, exec, results$ = [];
        d_name = "derivitave." + derivitave;
        for (i$ = 0, len$ = (ref$ = execs).length; i$ < len$; ++i$) {
          exec = ref$[i$];
          if (exec === d_name) {
            results$.push(this$.exec(exec));
          }
        }
        return results$;
      });
    }
  };
  prototype.states = {
    uninitialized: {
      onenter: function(){
        var task, this$ = this;
        task = this.task('initializing...');
        task.push(function(done){
          console.log("loading PublicDB");
          return this$.archive.once_initialized(function(){
            console.log("db is ready!");
            return done();
          });
        });
        return task.end(function(err, res){
          console.log("all init tasks done!");
          return this$.transitionSoon('ready');
        });
      }
    },
    ready: {
      onenter: function(){},
      auth: function(err, session){
        if (err) {
          return this.emitSoon('noauth', err);
        } else {
          return this.emitSoon('auth', session);
        }
      },
      'new:StoryBook': function(){}
    }
  };
  prototype.begin = function(refs, el, id){
    refs.library = this.library;
    return new StoryBook(refs, el, id);
  };
  return UniVerse;
}(Fsm));
Object.defineProperty(exports, "UniVerse", {
  get: function(){
    _universe || (_universe = new UniVerse);
    return _universe;
  }
});
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}