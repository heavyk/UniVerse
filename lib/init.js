// Generated by LiveScript 1.2.0
var Path, Url, ref$, Fsm, ToolShed, _, Debug, UniVerse, load_bps, router, init, out$ = typeof exports != 'undefined' && exports || this;
Path = require('path');
Url = require('url');
ref$ = require('MachineShop'), Fsm = ref$.Fsm, ToolShed = ref$.ToolShed, _ = ref$._;
Debug = ToolShed.Debug;
load_bps = function(refs){
  var i$, ref$, len$, v, k;
  Blueprint._ = {};
  for (i$ = 0, len$ = (ref$ = Word._).length; i$ < len$; ++i$) {
    v = i$;
    k = ref$[i$];
    delete Word._[k];
    Word._[k] = {};
  }
  refs.bp = {};
  return refs.verse = {};
};
out$.router = router = function(path, refs){
  var debug, content_el;
  console.error("you should not be calling this!");
  return;
  debug = Debug('router');
  process.removeAllListeners('uncaughtException');
  process.on('uncaughtException', function(err){
    console.error("uncaught error:", err.stack);
    throw err;
  });
  content_el = doc.getElementById('content');
  console.log("router path", path);
  console.log("content_el", content_el);
  Poem("affinaty", {
    $: $,
    window: window
  });
  window.Poem = Poem;
  load_bps(refs);
  content_el.innerHTML = '';
  console.log("path: " + path);
  path = path.split('/');
  if (path[0] === '') {
    path.splice(0, 1);
  }
  return poem.session.route(path);
};
out$.init = init = function(refs){
  var debug, window, doc, $, cE, aC, Mousetrap, url, cur_proto, cur_host, cur_path, cur_watcher, cur_file, figurehead, el, init_watcher;
  console.log("init.init");
  debug = Debug('init');
  debug("init poem manager affinaty");
  window = refs.window;
  doc = window.document;
  refs.$ = $ = window.$;
  refs.cE = cE = window.cE;
  refs.aC = aC = window.aC;
  cE.$ = $;
  Mousetrap = window.Mousetrap;
  console.log("initializing UniVerse", UniVerse);
  UniVerse = require('./UniVerse').UniVerse;
  window.UniVerse = UniVerse;
  if (ToolShed.nw_version) {
    process.removeAllListeners('uncaughtException');
    process.on('uncaughtException', function(err){
      console.error("uncaught error:", err.stack);
      throw err;
    });
  }
  url = Url.parse(window.location.href);
  cur_proto = url.protocol;
  cur_host = url.host;
  cur_path = url.path;
  figurehead = (function(){
    switch (url.hostname) {
    case 'beta.affinaty.com':
      return 'Affinaty';
    case 'dev.affinaty.com':
      return 'Affinaty';
    case 'dev.sandrafeltes.com':
      return 'Sandra';
    case 'hamsternippl.es':
      return 'MechanicOfTheSequence';
    default:
      return 'UniVerse';
    }
  }());
  el = null;
  process.nextTick(function(){
    var book;
    book = UniVerse.begin({
      window: window,
      require: require
    }, el);
    book.exec('open', figurehead, 'latest', cur_path);
    return aC(null, book);
  });
  console.log("maybe do some sort of loading screen here eventually");
  init_watcher = function(){
    window.watches = [];
    return _.each($('link'), function(e){
      var uri, p, watcher;
      if (e.href) {
        uri = Url.parse(e.href);
        if (uri.protocol === 'file:' || Path.extname(uri.path) === '.less') {
          p = Path.resolve(uri.path.substr(1));
          console.log("gonna watch path", p);
          watcher = Fs.watchFile(p, {
            interval: 500
          }, function(evt, filename){
            console.log("oh shit, a CSS update", window.less);
            return window.less.refresh();
          });
          return window.watches.push(watcher);
        }
      }
    });
  };
  console.log("TODO: .less file watching/reloading (add this to the laboratory)");
  return UniVerse;
};