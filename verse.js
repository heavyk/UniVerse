// Generated by LiveScript 1.2.0
var Path, Fs, Growl, ref$, DaFunk, Config, Debug, Implementation, Reality, LocalLibrary, Ambiente, UniVerse, debug, print_uncaught, add_growl, amb;
console.log("welcome to verse");
console.log("argv:", process.argv);
console.log("TODO: add verse stuff here");
Path = require('path');
Fs = require('fs');
Growl = require('growl');
require('LiveScript');
ref$ = require('MachineShop'), DaFunk = ref$.DaFunk, Config = ref$.Config, Debug = ref$.Debug;
Implementation = require(Path.join(__dirname, 'src', 'Implementation')).Implementation;
Reality = require(Path.join(__dirname, 'src', 'Reality')).Reality;
LocalLibrary = require(Path.join(__dirname, 'src', 'LocalLibrary')).LocalLibrary;
ref$ = require(Path.join(__dirname, 'src', 'Source')), Ambiente = ref$.Ambiente, UniVerse = ref$.UniVerse;
debug = Debug('verse');
print_uncaught = function(err){
  if (err.filename) {
    return console.log("error compiling file: " + err.filename + " - " + err);
  } else {
    return console.error("uncaughtException: " + err.stack);
  }
};
process.on('uncaughtException', print_uncaught);
add_growl = function(fsm){
  var title;
  title = fsm.namespace;
  title = title.substr(0, title.length - 4);
  fsm.on('debug:notify', function(data){
    return Growl(data.message, {
      title: title,
      image: './icons/fail.png'
    });
  });
  fsm.on('debug:error', function(data){
    return Growl(data.message, {
      title: title,
      image: './icons/fail.png'
    });
  });
  fsm.on('compile:success', function(dd){
    return Growl(this.path + " compiled correctly", {
      title: title,
      image: './icons/success.png'
    });
  });
  return fsm.on('compile:failure', function(err){
    return Growl(err.message, {
      title: title,
      image: './icons/fail.png'
    });
  });
};
amb = new Ambiente('sencillo');
amb.on('state:ready', function(){
  var impl, narrator;
  console.log("ambiente is ready!!");
  console.log("technically, I shouldn't need to wait for its ready state. the Implementation should do that");
  add_growl(impl = new Implementation(amb, "origin/ArangoDB.concept.ls"));
  return impl.on('compile:success', function(){
    var ArangoDB, narrator;
    _.each(impl._instances, function(inst){
      return inst.exec('destroy');
    });
    ArangoDB = impl.imbue(Reality);
    narrator = new ArangoDB({
      port: 1111
    });
    return narrator.on('state:ready', function(){
      return console.log('HTTP ready');
    });
  });
});