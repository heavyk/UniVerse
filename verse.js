// Generated by LiveScript 1.2.0
var Path, Fs, Growl, e, ref$, DaFunk, Config, Debug, Implementation, Reality, Ether, LocalLibrary, Ambiente, UniVerse, debug, print_uncaught, add_growl, verse, version, src, mV;
console.log("welcome to verse");
console.log("argv:", process.argv);
console.log("TODO: add verse stuff here");
Path = require('path');
Fs = require('fs');
try {
  Growl = require('growl');
} catch (e$) {
  e = e$;
  Growl = function(){};
}
require('LiveScript');
ref$ = require('MachineShop'), DaFunk = ref$.DaFunk, Config = ref$.Config, Debug = ref$.Debug;
Implementation = require(Path.join(__dirname, 'src', 'Implementation')).Implementation;
Reality = require(Path.join(__dirname, 'src', 'Reality')).Reality;
Ether = require(Path.join(__dirname, 'src', 'Ether')).Ether;
LocalLibrary = require(Path.join(__dirname, 'src', 'LocalLibrary')).LocalLibrary;
ref$ = require(Path.join(__dirname, 'src', 'Source')), Ambiente = ref$.Ambiente, UniVerse = ref$.UniVerse;
debug = Debug('verse');
print_uncaught = function(err){
  if (err.filename) {
    return console.log("error compiling file: " + err.filename + " - " + err);
  } else {
    return console.error("uncaughtException: " + err.stack);
  }
};
process.on('uncaughtException', print_uncaught);
add_growl = function(fsm){
  var title;
  title = fsm.namespace;
  title = title.substr(0, title.length - 4);
  fsm.on('debug:notify', function(data){
    return Growl(data.message, {
      title: title,
      image: './icons/fail.png'
    });
  });
  fsm.on('debug:error', function(data){
    return Growl(data.message, {
      title: title,
      image: './icons/fail.png'
    });
  });
  fsm.on('compile:success', function(dd){
    return Growl(this.path + " compiled correctly", {
      title: title,
      image: './icons/success.png'
    });
  });
  return fsm.on('compile:failure', function(err){
    return Growl(err.message, {
      title: title,
      image: './icons/fail.png'
    });
  });
};
console.log("argv", process.argv);
verse = process.argv[3];
version = process.argv[4];
console.log("gonna monitor changes to the multiverse... if there are any, we should reload");
src = new Implementation(null, "./JesusMuthaFuckinChrist.json.ls", "./source.json");
src.once('saved', function(){
  return console.log("source is ready!");
});
mV = new Implementation(null, "./MultiVerse.json.ls", "./multiverse.json");
mV.on('compile:success', function(){
  console.log("compile was a success");
  return this.debug("multiverse modified...");
});
mV.on('state:ready', function(mv_impl){
  return this.debug("multiverse is READY");
});
mV.once('saved', function(){
  var amb;
  amb = new Ambiente(process.env.AMBIENTE_ID || 'sencillo');
  return amb.on('state:ready', function(){
    var impl, db;
    console.log("ambiente is ready!!");
    console.log("TODO: technically, I shouldn't need to wait for its ready state. the Implementation should do that");
    console.log("load narrator");
    add_growl(impl = new Implementation(amb, "origin/Narrator.concept.ls"));
    return impl.on('compile:success', function(){
      var ArangoDB, db;
      _.each(impl._instances, function(inst){
        return inst.exec('destroy');
      });
      ArangoDB = impl.imbue(Ether);
      db = new ArangoDB({
        port: 1155
      });
      return db.on('state:ready', function(){
        return console.log('ArangoDB ready');
      });
    });
  });
});